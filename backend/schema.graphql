type User {
  _id: ID
  name: String!
  email: String
  password: String
  role: Role
  organization: ID
}

type Organization {
  _id: ID
  name: String
  email: String
  url: String
  status: Status
}

type UserData {
  _id: ID
  name: String
  email: String
  role: Role
  organization: Organization
}

type JwtToken {
  token: String!
}

type UserWithToken {
  _id: String
  name: String
  email: String
  role: Role
  organization: Organization
  userJwtToken: JwtToken
}

type Error {
  status: Int
  message: String
}

enum Role {
  User
  Admin
  Maintainer
}

enum Status {
  Approved
  Review
  Denied
}

input RegisterInput {
  name: String!
  email: String!
  url: String
}

input LoginInput {
  organization: String!
  email: String!
  password: String!
}

input ActivateInput {
  id: ID!
  password: String!
}

input ResetPasswordInput {
  id: ID!
  password: String!
}

input InviteUserInput {
  name: String!
  email: String!
  role: Role!
}

input InviteOrganizationInput {
  name: String!
  email: String!
  url: String
}

input ForgotPasswordInput {
  name: String!
  email: String!
}

input UpdateStatusInput {
  id: String
  status: Status
}

input UpdateRoleInput {
  id: String
  role: Role
}

type Count {
  resume: Int
  job: Int
}

type Job {
  job_id: String
  job_code_title: String
  description: String
}

type Work {
  company: String
  designation: String
  date_of_joining: String
  date_of_leaving: String
}

type Education {
  degree_name: String
  degree_type: String
  institute_name: String
}

# type Candidate {
#   first_name: String
#   last_name: String
#   email: String
#   phone: String
#   date_of_birth: String
#   candidate_age: String
#   current_address: String
#   permanent_address: String
#   country: String
#   total_work_experience: Float
#   work_experience: [Work]
#   education: [Education]
#   employer_id: String
#   file_name: String
#   fresher: String
#   gender: String
#   job_code_title: String
#   job_id: String
#   languages: String
# }

type Candidate {
  value: String
}

input CandidateQuery {
  keywords: [String]
  must: Boolean
  notKeywords: [String]
  gender: String
  location: String
  expMax: String
  expMin: String
  department: String
  industry: String
  currentCompany: String
  currentDesignation: String
  ugCourse: String
  pgCourse: String
  pdCourse: String
  jobcode: String
  global: Boolean
}

type Query {
  getUserData: UserData
  getJob(query: String): [Job]
  getJobs: [Job]
  getCount: Count
  getCandidate(query: CandidateQuery, page: Int): [Candidate]
  getOrganizations: [Organization]
  getUserByOrganization: [User]
}

type Mutation {
  registerOrganization(input: RegisterInput!): Boolean
  inviteOrganization(input: InviteOrganizationInput!): Boolean
  deleteOrganization(id: ID!): Boolean
  updateOrganizationStatus(input: UpdateStatusInput!): Boolean
  inviteUser(input: InviteUserInput!): Boolean
  forgotPassword(input: ForgotPasswordInput!): Boolean
  resetPasswordUser(input: ResetPasswordInput!): Boolean
  activateUser(input: ActivateInput!): Boolean
  deleteUser(id: ID!): Boolean
  updateUserRole(input: UpdateRoleInput!): Boolean
  loginUser(input: LoginInput!): UserWithToken
}
