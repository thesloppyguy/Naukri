type User {
  _id: ID
  name: String!
  email: String
  password: String
  role: Role
  organization: ID
}

type Organization {
  _id: ID
  name: String
  email: String
  url: String
  status: Status
}

type UserData {
  name: String!
  email: String
  password: String
  role: Role
  organization: Organization
}

type JwtToken {
  token: String!
}

type UserWithToken {
  _id: String
  name: String
  email: String
  role: Role
  organization: String
  userJwtToken: JwtToken
}

type Error {
  status: Int
  message: String
}

enum Role {
  User
  Admin
  Maintainer
}

enum Status {
  Approved
  Review
  Denied
}

input RegisterInput {
  name: String!
  email: String!
  url: String
}

input LoginInput {
  organization: String!
  email: String!
  password: String!
}

input ActivateInput {
  id: ID!
  password: String!
}

input ResetPasswordInput {
  id: ID!
  password: String!
}

input InviteUserInput {
  organization: ID!
  name: String!
  email: String!
  role: Role!
}

input InviteOrganizationInput {
  name: String!
  email: String!
  url: String
}

input ForgotPasswordInput {
  name: String!
  email: String!
}

input UpdateStatusInput {
  id: String
  status: Status
}

input UpdateRoleInput {
  id: String
  role: Role
}

type BoolAuth {
  response: Boolean
  error: Error
}

type UserAuth {
  response: UserWithToken
  error: Error
}

type Count {
  resume: Int
  job: Int
}

type Query {
  getUserData: UserData

  getCount: Count
  getOrganizations: [Organization]
  getUserByOrganization(organizationId: ID!): [User]
}

type Mutation {
  registerOrganization(input: RegisterInput!): BoolAuth
  inviteOrganization(input: InviteOrganizationInput!): BoolAuth
  deleteOrganization(id: ID!): BoolAuth
  updateOrganizationStatus(input: UpdateStatusInput!): BoolAuth

  inviteUser(input: InviteUserInput!): BoolAuth
  forgotPassword(input: ForgotPasswordInput!): BoolAuth
  resetPasswordUser(input: ResetPasswordInput!): BoolAuth
  activateUser(input: ActivateInput!): BoolAuth
  deleteUser(id: ID!): BoolAuth
  updateUserRole(input: UpdateRoleInput!): BoolAuth

  loginUser(input: LoginInput!): UserAuth
}
